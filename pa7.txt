#include <xc.h>
//Configuration bit setting//
#pragma config OSC = HS //Oscillator Selection
#pragma config WDT = OFF //Disable Watchdog timer
#pragma config LVP = OFF //Disable Low Voltage Programming
#pragma config PBADEN = OFF //Disable PORTB Analog inputs
//Declarations for LCD Connection
#define LCD_DATA PORTD //LCD data port
#define en PORTEbits.RE2 // enable signal
#define rw PORTEbits.RE1 // read/write signal
#define rs PORTEbits.RE0 // register select signal
//Function Prototypes
void ADC_Init(void); //Function to initialize
the ADC
unsigned int Get_ADC_Result(void); //Function to Get ADC result after
conversion
void Start_Conversion(void); //Function to Start of Conversion
void msdelay (unsigned int time); //Function to generate delay
void init_LCD(void); //Function to initialise
the LCD
void LCD_command(unsigned char cmd); //Function to pass command to the LCD
void LCD_data(unsigned char data); //Function to write character to
the LCD
void LCD_write_string(char *str);//Function to write string to the LCD
//Start of main program
void main()
{
 char msg1[] = "On-chip ADC Prog. ";
 char msg2[] = "ADC VOLT:";
 unsigned char i, Thousands,Hundreds,Tens,Ones;
 unsigned int adc_val;
 unsigned long Voltage;
 ADCON1 = 0x0F; //Configuring the PORTE pins as digital I/O
 TRISD = 0x00; //Configuring PORTD as output
 TRISE = 0x00; //Configuring PORTE as output
 ADC_Init(); // Init ADC peripheral
 init_LCD(); // Init LCD Module
 LCD_write_string(msg1); // Display Welcome Message
 LCD_command (0xC0); // Goto second line, 0th place of LCD
 LCD_write_string(msg2); // Display Message "ADC O/P"
 while(1)
 {
 Start_Conversion(); //Trigger conversion
 adc_val= Get_ADC_Result();//Get the ADC output by polling GO bit

Voltage = (long) adc_val*0x01E9; //Convert Binary result into Voltage
 adc_val = Voltage /0x0064; //e.g. ADC OP 0x03FF (1023) means
5V (5000)= (ADC Result * 489)/100
 LCD_command (0xC9); 
 i = adc_val/1000 ;
 Thousands = i + 0x30;
 LCD_data (Thousands);
 LCD_data ('.'); 
 i = (adc_val%1000)/100;
 Hundreds = i + 0x30; 
 LCD_data (Hundreds); 
i = ((adc_val%1000)%100)/10; 
 Tens = i + 0x30; 
 LCD_data (Tens); 
 i = adc_val%10 ;
 Ones = i + 30; 
 LCD_data (i + 0x30); 
 msdelay(300); 
 }
}
void ADC_Init()
{
 ADCON0=0b00000000;
 ADCON1=0b00001110;
 ADCON2=0b10001110;
 ADCON0bits.ADON=1;
}
void Start_Conversion()
{
 ADCON0bits.GO=1;
}
unsigned int Get_ADC_Result()
{
 unsigned int ADC_Result=0;
 while(ADCON0bits.GO);
 ADC_Result=ADRESL;
 ADC_Result|=((unsigned int)ADRESH) << 8;
 return ADC_Result;
}
void msdelay (unsigned int time) //Function to generate delay
{
unsigned int i, j;
 for (i = 0; i < time; i++)
for (j = 0; j < 710; j++);
}
void init_LCD(void) 
{
 LCD_command(0x38); 
 msdelay(15);
 LCD_command(0x01); 
 msdelay(15);
 LCD_command(0x0C); 
 msdelay(15);
 LCD_command(0x80); 
 msdelay(15);
}
void LCD_command(unsigned char cmd) 
{
 LCD_DATA = cmd;
 rs = 0;
 rw = 0;
 en = 1; 
 msdelay(15);
 en = 0;
}
void LCD_data(unsigned char data)
{
 LCD_DATA = data;
 rs = 1; 
 rw = 0; 
 en = 1; 
 msdelay(15);
 en = 0;
}
void LCD_write_string(char *str)
{
 int i = 0;
 while (str[i] != 0)
 {
 LCD_data(str[i]);
 msdelay(15);
 i++;
 }
}